/*
* generated by Xtext 2.28.0
 */
package org.eclipse.emf.emfatic.xtext.tests;

import com.google.inject.Inject;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import java.io.InputStream;
import java.net.URISyntaxException;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.emfatic.xtext.emfatic.Annotation;
import org.eclipse.emf.emfatic.xtext.emfatic.CompUnit;
import org.eclipse.emf.emfatic.xtext.emfatic.PackageDecl;
import org.eclipse.xtext.resource.XtextResourceSet;
import com.google.inject.Provider;

@ExtendWith(InjectionExtension.class)
@InjectWith(EmfaticInjectorProvider.class)
class EmfaticEcoreTest {
	
	@Inject
	private Provider<XtextResourceSet> resourceSetProvider;
	
	@Inject
	private ParseHelper<CompUnit> parseHelper;
	
	
	@Test
	void mainPackage() throws URISyntaxException {
		InputStream complete = getClass().getResourceAsStream("/ecore.emf");
		URI uri = URI.createURI(getClass().getResource("/ecore.emf").toURI().toString());
		CompUnit compUnit = parseHelper.parse(complete, uri, null, resourceSetProvider.get());
		PackageDecl pckg = compUnit.getPackage();
		Assertions.assertEquals(1, pckg.getAnnotations().size());
		Annotation namespace = pckg.getAnnotations().get(0);
		Assertions.assertEquals("namespace", namespace.getSource().getId().getId1());
	}
}