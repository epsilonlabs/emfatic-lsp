/*
* generated by Xtext 2.28.0
 */
package org.eclipse.emf.emfatic.xtext.tests;

import java.io.InputStream;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.emfatic.xtext.emfatic.*;
import org.eclipse.xtext.resource.XtextResourceSet;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import com.google.inject.Inject;
import com.google.inject.Provider;

@ExtendWith(InjectionExtension.class)
@InjectWith(EmfaticInjectorProvider.class)
class EmfaticEcoreTest {
	
	@Inject
	private Provider<XtextResourceSet> resourceSetProvider;
	
	@Inject
	private ParseHelper<CompUnit> parseHelper;
	
	
	@Test
	void mainPackage() throws URISyntaxException {
		InputStream complete = getClass().getResourceAsStream("/ecore.emf");
		URI uri = URI.createURI(getClass().getResource("/ecore.emf").toURI().toString());
		CompUnit compUnit = parseHelper.parse(complete, uri, null, resourceSetProvider.get());
		PackageDecl pckg = compUnit.getPackage();
		Assertions.assertEquals(1, pckg.getAnnotations().size());
		Annotation namespace = pckg.getAnnotations().get(0);
		StringOrQualifiedID source = namespace.getSource();
		Assertions.assertNull(source.getLiteral());
		Assertions.assertEquals("namespace", source.getId());
		EList<Details> details = namespace.getDetails();
		Assertions.assertEquals(2, details.size());
		Details entry = details.get(0);
		Assertions.assertEquals("uri", entry.getKey());
		Assertions.assertEquals("http://www.eclipse.org/emf/2002/Ecore", entry.getValue());
		entry = details.get(1);
		Assertions.assertEquals("prefix", entry.getKey());
		Assertions.assertEquals("ecore", entry.getValue());
	}
	
	@Test
	void importStmts() throws URISyntaxException {
		InputStream complete = getClass().getResourceAsStream("/ecore.emf");
		URI uri = URI.createURI(getClass().getResource("/ecore.emf").toURI().toString());
		CompUnit compUnit = parseHelper.parse(complete, uri, null, resourceSetProvider.get());
		EList<Import> imports = compUnit.getImports();
		Assertions.assertEquals(0, imports.size());
	}
	
	@Test
	void topLevelDecls() throws URISyntaxException {
		InputStream complete = getClass().getResourceAsStream("/ecore.emf");
		URI uri = URI.createURI(getClass().getResource("/ecore.emf").toURI().toString());
		CompUnit compUnit = parseHelper.parse(complete, uri, null, resourceSetProvider.get());
		EList<TopLevelDecl> topLevelDecls = compUnit.getDeclarations();
		Assertions.assertEquals(52, topLevelDecls.size());
	}
	
	@Test
	void subPacakges() throws URISyntaxException {
		InputStream complete = getClass().getResourceAsStream("/ecore.emf");
		URI uri = URI.createURI(getClass().getResource("/ecore.emf").toURI().toString());
		CompUnit compUnit = parseHelper.parse(complete, uri, null, resourceSetProvider.get());
		EList<TopLevelDecl> topLevelDecls = compUnit.getDeclarations();
		List<TopLevelDecl> subPacakges = topLevelDecls.stream()
			.filter(tld -> tld.getDeclaration() instanceof SubPackageDecl)
			.collect(Collectors.toList());
		Assertions.assertEquals(0, subPacakges.size());
	}
	
	@Test
	void classes() throws URISyntaxException {
		InputStream complete = getClass().getResourceAsStream("/ecore.emf");
		URI uri = URI.createURI(getClass().getResource("/ecore.emf").toURI().toString());
		CompUnit compUnit = parseHelper.parse(complete, uri, null, resourceSetProvider.get());
		EList<TopLevelDecl> topLevelDecls = compUnit.getDeclarations();
		List<TopLevelDecl> classes = topLevelDecls.stream()
				.filter(tld -> tld.getDeclaration() instanceof ClassDecl)
				.collect(Collectors.toList());
		Assertions.assertEquals(20, classes.size());
	}
	
	@Test
	void datatypes() throws URISyntaxException {
		InputStream complete = getClass().getResourceAsStream("/ecore.emf");
		URI uri = URI.createURI(getClass().getResource("/ecore.emf").toURI().toString());
		CompUnit compUnit = parseHelper.parse(complete, uri, null, resourceSetProvider.get());
		EList<TopLevelDecl> topLevelDecls = compUnit.getDeclarations();
		List<TopLevelDecl> datatypes = topLevelDecls.stream()
				.filter(tld -> tld.getDeclaration() instanceof DataTypeDecl)
				.collect(Collectors.toList());
			Assertions.assertEquals(32, datatypes.size());
	}
	
	@Test
	void enums() throws URISyntaxException {
		InputStream complete = getClass().getResourceAsStream("/ecore.emf");
		URI uri = URI.createURI(getClass().getResource("/ecore.emf").toURI().toString());
		CompUnit compUnit = parseHelper.parse(complete, uri, null, resourceSetProvider.get());
		EList<TopLevelDecl> topLevelDecls = compUnit.getDeclarations();
		List<TopLevelDecl> enums = topLevelDecls.stream()
			.filter(tld -> tld.getDeclaration() instanceof EnumDecl)
			.collect(Collectors.toList());
		Assertions.assertEquals(0, enums.size());
	}
	
	@Test
	void mapentries() throws URISyntaxException {
		InputStream complete = getClass().getResourceAsStream("/ecore.emf");
		URI uri = URI.createURI(getClass().getResource("/ecore.emf").toURI().toString());
		CompUnit compUnit = parseHelper.parse(complete, uri, null, resourceSetProvider.get());
		EList<TopLevelDecl> topLevelDecls = compUnit.getDeclarations();
		List<TopLevelDecl> mapentries = topLevelDecls.stream()
			.filter(tld -> tld.getDeclaration() instanceof MapEntryDecl)
			.collect(Collectors.toList());
		Assertions.assertEquals(0, mapentries.size());
	}
	
	@Test
	void eAttributeClass() throws URISyntaxException {
		InputStream complete = getClass().getResourceAsStream("/ecore.emf");
		URI uri = URI.createURI(getClass().getResource("/ecore.emf").toURI().toString());
		CompUnit compUnit = parseHelper.parse(complete, uri, null, resourceSetProvider.get());
		TopLevelDecl declaration = compUnit.getDeclarations().stream()
				.filter(tld -> tld.getDeclaration() instanceof ClassDecl
						&& Objects.equals("EAttribute", ((ClassDecl)tld.getDeclaration()).getName()))
				.findFirst()
				.orElseThrow();
		// Annotation
		Assertions.assertEquals(1, declaration.getAnnotations().size());
		Annotation annot = declaration.getAnnotations().get(0);
		StringOrQualifiedID source = annot.getSource();
		Assertions.assertNull(source.getLiteral());
		Assertions.assertEquals("Ecore", source.getId());
		EList<Details> details = annot.getDetails();
		Assertions.assertEquals(1, details.size());
		Details entry = details.get(0);
		Assertions.assertEquals("constraints", entry.getKey());
		Assertions.assertEquals("ConsistentTransient", entry.getValue());
		// Class
		ClassDecl cls = (ClassDecl) declaration.getDeclaration();
		Assertions.assertFalse(cls.isAbstract());
		Assertions.assertEquals("class", cls.getKind());
		Assertions.assertNull(cls.getTypeParamsInfo());
		EList<BoundClassExceptWildcard> superTypes = cls.getSuperTypes();
		Assertions.assertEquals(1, superTypes.size());
		BoundClassExceptWildcard superCls = superTypes.get(0);
		Assertions.assertInstanceOf(ClassDecl.class, superCls.getBound());
		Assertions.assertEquals("EStructuralFeature", ((ClassDecl) superCls.getBound()).getName());
		Assertions.assertEquals(0, superTypes.get(0).getTypeArgs().size());
		Assertions.assertNull(cls.getInstClassName());
		Assertions.assertEquals(2, cls.getMembers().size());
	}
	
	
	@Test
	void classMemberDecl() throws URISyntaxException {
		InputStream complete = getClass().getResourceAsStream("/ecore.emf");
		URI uri = URI.createURI(getClass().getResource("/ecore.emf").toURI().toString());
		CompUnit compUnit = parseHelper.parse(complete, uri, null, resourceSetProvider.get());
		ClassDecl eClass = compUnit.getDeclarations().stream()
				.filter(tld -> tld.getDeclaration() instanceof ClassDecl
						&& Objects.equals("EClass", ((ClassDecl)tld.getDeclaration()).getName()))
				.map(tld -> (ClassDecl) tld.getDeclaration())
				.findFirst()
				.orElseThrow();
		// Operations
		long ops = eClass.getMembers().stream()
		.filter(m -> m.getMember() instanceof Operation)
		.count();
		Assertions.assertEquals(5, ops);
		// Attributes
		long attrs = eClass.getMembers().stream()
			.filter(m -> m.getMember() instanceof Attribute)
			.count();
		Assertions.assertEquals(2, attrs);
		// References
		long refs = eClass.getMembers().stream()
			.filter(m -> m.getMember() instanceof Reference)
			.count();
		Assertions.assertEquals(14, refs);
		long nonCont = eClass.getMembers().stream()
				.filter(m -> m.getMember() instanceof Reference)
				.map(m -> (Reference)m.getMember())
				.filter(r -> Objects.equals("ref", r.getKind()))
				.count();
		Assertions.assertEquals(11, nonCont);
		long cont = eClass.getMembers().stream()
				.filter(m -> m.getMember() instanceof Reference)
				.map(m -> (Reference)m.getMember())
				.filter(r -> Objects.equals("val", r.getKind()))
				.count();
		Assertions.assertEquals(3, cont);
		
		
		// Operations
//		List<Operation> ops = eClass.getMembers().stream()
//				.filter(m -> m.getMember() instanceof Operation)
//				.map(m -> (Operation) m.getMember())
//				.collect(Collectors.toList());
//		Assertions.assertEquals(5, ops.size());
//		// Attributes
//		List<Attribute> attr = eClass.getMembers().stream()
//				.filter(m -> m.getMember() instanceof Attribute)
//				.map(m -> (Attribute) m.getMember())
//				.collect(Collectors.toList());
//		Assertions.assertEquals(5, attr.size());
//		
//		Operation getFeatureCount = ops.stream()
//				.filter(op -> Objects.equals("getFeatureCount", op.getName()))
//				.findFirst()
//				.orElseThrow();
//		ResultType resultType = getFeatureCount.getResType();
//		Assertions.assertFalse(resultType.isVoid());
//		TypeWithMulti resultTypeMulti = (TypeWithMulti)resultType;
//		Assertions.assertEquals("EInt", resultTypeMulti.getType().getName());
//		Assertions.assertEquals(0, getFeatureCount.getParams().size());
//		Operation getEStructuralFeature = ops.stream()
//				.filter(op -> Objects.equals("getEStructuralFeature", op.getName()))
//				.findFirst()
//				.orElseThrow();
//		resultType = getEStructuralFeature.getResType();
//		Assertions.assertFalse(resultType.isVoid());
//		resultTypeMulti = (TypeWithMulti)resultType;
//		
//		Assertions.assertEquals("EStructuralFeature", resultTypeMulti.getType().getName());
//		Assertions.assertEquals(1, getEStructuralFeature.getParams().size());
//		Param featureID = getEStructuralFeature.getParams().get(0);
//		Assertions.assertEquals("featureID", featureID.getName());
//		Assertions.assertEquals(0, featureID.getLeadingAnnotations().size());
//		Assertions.assertEquals(0, featureID.getTrailingAnnotations().size());
//		Assertions.assertEquals(0, featureID.getModifiers().size());
//		Assertions.assertEquals("EInt", featureID.getTypeWithMulti().getType().getName());
		
		
		
	}
	
}